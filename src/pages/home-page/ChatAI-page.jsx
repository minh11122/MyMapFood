import { useState, useRef, useEffect } from "react";
import { MessageCircle, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import ReactMarkdown from "react-markdown";

const OPENROUTER_API_KEY = import.meta.env.VITE_OPENROUTER_API_KEY;
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";

export const ChatAI = () => {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const chatEndRef = useRef(null);

  // üîΩ T·ª± ƒë·ªông cu·ªôn xu·ªëng khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // ‚ú® L√†m g·ªçn n·ªôi dung tr·∫£ v·ªÅ (x√≥a kho·∫£ng tr·∫Øng th·ª´a)
  const cleanText = (text) => {
    return text
      .replace(/\n{3,}/g, "\n\n") // gi·∫£m 3+ d√≤ng tr·ªëng th√†nh 1
      .trim();
  };

  const handleSend = async (customInput) => {
    const userInput = customInput || input;
    if (!userInput.trim()) return;

    setMessages((prev) => [...prev, { from: "user", text: userInput }]);
    setInput("");
    setLoading(true);

    try {
      const res = await fetch(OPENROUTER_API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${OPENROUTER_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek/deepseek-chat",
          messages: [
            {
              role: "system",
              content:
                "B·∫°n l√† MyMapFoodAI ‚Äì tr·ª£ l√Ω ·∫©m th·ª±c th√¢n thi·ªán. Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ m√≥n ƒÉn, qu√°n ƒÉn, ƒë·ªì u·ªëng, ·∫©m th·ª±c. N·∫øu c√¢u h·ªèi ngo√†i ch·ªß ƒë·ªÅ, tr·∫£ l·ªùi 'Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ v·ªÅ ·∫©m th·ª±c v√† qu√°n ƒÉn üçú'. Tr√¨nh b√†y g·ª£i √Ω m√≥n ƒÉn th·∫≠t ng·∫Øn g·ªçn, d·ªÖ nh√¨n, m·ªói m√≥n m·ªôt d√≤ng c√≥ emoji n·∫øu ƒë∆∞·ª£c.",
            },
            { role: "user", content: userInput },
          ],
        }),
      });

      const data = await res.json();
      let reply =
        data?.choices?.[0]?.message?.content ||
        "Xin l·ªói, t√¥i ch∆∞a c√≥ ph·∫£n h·ªìi t·ª´ AI üò¢";

      if (reply.includes("***")) reply = "Xin l·ªói, ph·∫£n h·ªìi n√†y kh√¥ng h·ª£p l·ªá üòÖ";
      reply = cleanText(reply);

      setMessages((prev) => [...prev, { from: "ai", text: reply }]);
    } catch (err) {
      console.error("OpenRouter error:", err);
      setMessages((prev) => [
        ...prev,
        { from: "ai", text: "L·ªói khi g·ªçi OpenRouter API üò¢" },
      ]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      {/* N√∫t m·ªü chat */}
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setOpen(!open)}
          className="bg-gradient-to-r from-yellow-500 to-yellow-600 hover:scale-110 transition-all rounded-full shadow-lg w-14 h-14 flex items-center justify-center"
        >
          {open ? (
            <X className="w-6 h-6 text-white" />
          ) : (
            <MessageCircle className="w-6 h-6 text-white" />
          )}
        </Button>
      </div>

      {/* H·ªôp chat */}
      {open && (
        <div className="fixed bottom-24 right-6 w-96 bg-white shadow-2xl rounded-2xl border border-gray-200 z-50 flex flex-col overflow-hidden">
          <div className="bg-gradient-to-r from-yellow-500 to-yellow-600 text-white px-4 py-3 font-bold text-center">
            üç¥ Chat v·ªõi MyMapFoodAI ü§ñ
          </div>

          {/* Khung chat hi·ªÉn th·ªã markdown */}
          <div className="flex-1 overflow-y-auto p-4 space-y-3 max-h-[420px] scrollbar-thin scrollbar-thumb-yellow-400">
            {messages.map((msg, i) => (
              <div
                key={i}
                className={`p-3 rounded-2xl text-sm leading-relaxed max-w-[85%] ${
                  msg.from === "user"
                    ? "bg-yellow-100 self-end ml-auto"
                    : "bg-gray-100 self-start prose prose-sm prose-yellow"
                }`}
              >
                <ReactMarkdown>{msg.text}</ReactMarkdown>
              </div>
            ))}
            {loading && (
              <div className="text-gray-400 text-sm italic">AI ƒëang g√µ...</div>
            )}
            <div ref={chatEndRef} />
          </div>

          {/* G·ª£i √Ω c√¢u h·ªèi */}
          <div className="p-2 border-t flex flex-wrap gap-2">
            {[
              "G·ª£i √Ω m√≥n ƒÉn m√πa l·∫°nh üç≤",
              "T√¥i th√≠ch ƒë·ªì cay üå∂Ô∏è",
              "Qu√°n ƒÉn quanh H√† N·ªôi üçΩÔ∏è",
            ].map((q, i) => (
              <Button
                key={i}
                variant="outline"
                size="sm"
                className="text-xs border-yellow-400 hover:bg-yellow-100"
                onClick={() => handleSend(q)}
              >
                {q}
              </Button>
            ))}
          </div>

          {/* √î nh·∫≠p v√† n√∫t g·ª≠i */}
          <div className="p-3 border-t flex gap-2 bg-gray-50">
            <Input
              placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ m√≥n ƒÉn..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              className="flex-1"
            />
            <Button
              onClick={() => handleSend()}
              className="bg-yellow-500 text-white hover:bg-yellow-600"
            >
              G·ª≠i
            </Button>
          </div>
        </div>
      )}
    </>
  );
};
